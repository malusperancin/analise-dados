X <- 5
print(x)
print(X)
#alo
X<-5; X
ls()
y<- 3
rm(X)
rm(list=ls())
ls()
class("ola")
class(10L)
class(0.35)
class(35)
class(2i)
class(T)
2/0
is.numeric(100)
is.integer(100)
c(1,2,3,4,5)
c(1,2,3,4,5)[4]
c <- c(1,2,3,4,5)
clc <- function() cat(rep("\n", 50))
clc()
c(1,2,3,4,"5)
c(1,2,3,4,"5")
c(1,2,3,4,"5)
5
clc()
j
''
'
c(1,2,3,4,"5")
c(1,2,3,4,"5")
1:10
x <- 1:10
-3:3
1.2:5
51:7i
seq(1,6)
seq(from=1, to=5, by0.5)
seq(from=1, to=5, by=0.5)
seq(1, 5, 0.5)
seq(1, lenght.out=5)
seq(1, length.out=5)
rep(x=1, times=4)
rep(1, 4)
rep(c(1,2,3), 3)
rep(x=c(1,2,3), times=2, each=3)
a<-c(1,2,3)
b<-c(5,6,7)
c<-c(a, b)
savehistory("C:/Users/Usuário/Desktop/COTUCA/GESTÃO DE INOVAÇÃAO/Aula 1.Rhistory")
a <- -1.5:6; a
as.integer(a)
as.logical(a)
as.logical(as.integer(a))
as.integer(a)
#forçando casting
b <- as.character(a);
#criando um vecto
vector(mode = "numeric", length = 5)
c<- vector(mode = "numeric", length = 5)
vector("logical", length = 3)
> is.nan(a)
is.nan(a)
a[0]<- NaN
print(a[0])
print(a["0])
>>
.
>
clc()
function(0)
x <- c(a = 1, b = 2)
## a b
## 1 2
x["a"]
x[1]
x<- c(1,2,3)
x[1]
x[3]
x.rm(1)
x <- x[-2]
# exclui elemento da posicao 2
x <- x[-2]
c[1:3]
rev(c)
> mat <- matrix(nrow = 4, ncol = 5);
mat <- matrix(nrow = 4, ncol = 5);
View(mat)
dim(mat)
attributes(mat)
$dim
[1] 4 5
attributes(mat)
matrix(data = "a", nrow = 4, ncol = 5)
matrix(data = 1:2, nrow = 4, ncol = 5)
matrix(data = 1:3, nrow = 4, ncol = 5)
matrix(data = 1:3, nrow = 4, ncol = 5, byrow = TRUE)
mat[1,]
mat[,1]
mat
mat[1]
mat[2]
mat3
mat[3]
mat[1:3,]
colnames(notas) <- c("bim-1", "bim-2", "bim-3", "bim-4")
rownames(notas) <- c("João", "Pedro", "Amanda", "Fábio", "Fernanda", "Gustavo",
"Severino", "Paulo", "Laura", "Túlio")
colnames(notas) <- c("bim-1", "bim-2", "bim-3", "bim-4")
arrayProdutoLocalTempo <- array(
data = sample(x = 1000:2000),
dim = c(4, 4, 4),
dimnames = list(
c("Notebook", "Celulares", "TV plasma", "Blue-ray"),
c("RS", "SC", "PR", "SP"),
c(2000L, 2001L, 2002L, 2003L)
)
)
arrayProdutoLocalTempo
rbind(1:3, 7:9, 4:6)
list("a", 1.2, TRUE, 1.5+2.8i)
ab <- list("a", 1.2, TRUE, 1.5+2.8i)
list(c(TRUE, 1.2), matrix(ncol = 4, nrow = 2), list("a", 30:35))
ls()
rm(ls())
rm(list=ls())
> factor(c("homem", "mulher", "homem", "homem", "mulher", "mulher"))
factor(c("homem", "mulher", "homem", "homem", "mulher", "mulher"))
aluno <- c("Joao", "Pedro", "Maria")
sala <- c(2,1,3)
escola <- data.frame(Aluno=aluno, Sala=sala,
+ stringsAsFactors=FALSE); escola
escola <- data.frame(Aluno=aluno, Sala=sala, stringsAsFactors=FALSE); escola
a <- 10:1
a^(<5)
a^(a<5)
pi
pi<-3.14
pi
rm(pi)
pi
letters
LETTERS
month.abb
month.name
months.Date()
sqrt(3)
sqrt(c(1,3,4))
exp(3)
log(a, base=5)
ceiling(3.4)
floor(3.6)
trunc(6.8)
round(6.8, 6)
> round(6.87956, 3)
round(6.87956, 3)
round(6.89
round(6.87956, 3)
round(6.8)
round(6.8)
setosa <- iris[iris$species="setosa",]
setosa <- iris[iris$species=="setosa"]
mean(setosa$Sepal.Length, setosa$Sepal.Width, setosa$Petal.Length, setosa$Petal.Width)
iris
setosa$Sepal.Length
setosa$(Sepal.Length)
mean(setosa$Sepal.Length)
mean(setosa[[1]])
mean(setosa[1,)
mean(setosa[1,])
setosa$Sepal.Length <- as.numeric(setosa$Sepal.Length)
setosa$Sepal.Length <- as.numeric(setosa$Sepal.Length)
setosa[["Sepal.Length"]] <- as.numeric(setosa[["Sepal.Length"]].Length)
setosa[["Sepal.Length"]] <- as.numeric(setosa[["Sepal.Length"]])
exercicio4 <- function(data){
mes <-months.abb[as.integer(format(as.Date(dados$horario),"%m"))]
return(mes)
}
exercicio4(as.date("2020-12-21"))
exercicio4 <- function(data){
mes <-month.abb[as.integer(format(as.Date(dados$horario),"%m"))]
return(mes)
}
exercicio4(as.date("2020-12-21"))
exercicio4 <- function(data){
mes <-month.abb[as.integer(format(as.Date(data),"%m"))]
return(mes)
}
exercicio4(as.date("2020-12-21"))
exercicio4("2020-12-21")
exercicio4 <- function(data){
mes <- month.abb[as.integer(format(as.Date(data),"%m"))]
dia <- as.integer(format(as.Date(data),"%d"))
ano <- as.integer(format(as.Date(data),"%Y"))
dataStr <- paste(dia, mes, ano, sep="/")
return(dataStr)
}
exercicio4("2020-12-21")
iris
mean(setosa$Sepal.Length[setosa$Species == "setosa"])
rm(list=ls())
install.packages("ggplot2")
install.packages("ggExtra")
install.packages("gridExtra")
install.packages("xlsx")
install.packages
tinytex::install_tinytex()
setwd("C:/Usuários/usuário/Documents/GitHub/analise-dados")
setwd("C:\Users\Usuário\Documents\GitHub\analise-dados")
setwd
setwd
setwd
library(ggplot2)
library(ggExtra)
library(gridExtra)
library(RColorBrewer)
library(xlsx)
library(tidyverse)
titulos <- c("horario", "temperatura", "vento", "umidade", "sensacao")
#pegamos o dado no arquivo e colocamos no data frame
cepagri <- read.csv("cepagri.csv", header = FALSE, sep = ";", col.names = titulos)
#convertemos e formatamos a data para POSIXct
cepagri[["horario"]] <- as.POSIXct(cepagri[["horario"]], format="%d/%m/%Y-%H:%M")
#pegamos os dados entre 01/01/2015 e 31/12/2020
cepagri <- cepagri[cepagri[["horario"]] >= "2015-01-01" & cepagri[["horario"]] <= "2020-12-31",]
install.packages("xlsx")
library(xlsx)
library(tidyverse)
titulos <- c("horario", "temperatura", "vento", "umidade", "sensacao")
#pegamos o dado no arquivo e colocamos no data frame
cepagri <- read.csv("cepagri.csv", header = FALSE, sep = ";", col.names = titulos)
titulos <- c("horario", "temperatura", "vento", "umidade", "sensacao")
#pegamos o dado no arquivo e colocamos no data frame
cepagri <- read.csv("cepagri.csv", header = FALSE, sep = ";", col.names = titulos)
setwd("C:/Users/Usuário/Documents/GitHub/analise-dados")
#pegamos o dado no arquivo e colocamos no data frame
cepagri <- read.csv("cepagri.csv", header = FALSE, sep = ";", col.names = titulos)
#convertemos e formatamos a data para POSIXct
cepagri[["horario"]] <- as.POSIXct(cepagri[["horario"]], format="%d/%m/%Y-%H:%M")
#pegamos os dados entre 01/01/2015 e 31/12/2020
cepagri <- cepagri[cepagri[["horario"]] >= "2015-01-01" & cepagri[["horario"]] <= "2020-12-31",]
#tiramos os dados que possuem erro/null
cepagri <- na.omit(cepagri)
#transformamos a temp em numeric (os outros campos ja ta)
cepagri[["temperatura"]] <- as.numeric(cepagri[["temperatura"]])
for(i in 1:nrow(cepagri)){
if(cepagri$sensacao[i] >= 99.9)
{
cepagri$sensacao[i] <- mean(c( cepagri$sensacao[i-1], cepagri$sensacao[i+1]))
}
if(cepagri$umidade[i] == 0)
{
#faz uma media de todos os indices de umidade do dia
cepagri$umidade[i] <- mean(cepagri$umidade[cepagri$horario >= cepagri$horario[i-1] & cepagri$horario < cepagri$horario[i]])
}
}
dados <- cepagri #dados prontos
meses <- factor(month.abb[as.integer(format(as.Date(dados[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
anos <- factor(as.integer(format(as.Date(dados[["horario"]]),"%Y")), levels = c(2015:2020), ordered = TRUE)
h2018 <- dados[dados[["horario"]] > "2017-12-31" & dados[["horario"]] <= "2018-12-31",]
meses2018 <- factor(month.abb[as.integer(format(as.Date(h2018[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
h2015 <- dados[dados[["horario"]] >= "2015-01-01" & dados[["horario"]] <= "2015-12-31",]
meses2015 <- factor(month.abb[as.integer(format(as.Date(h2015[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
# Tema que será usado em cada gráfico
meu_tema = theme_bw() +
theme(plot.title = element_text(hjust = 0, size = 18),
axis.title = element_text(hjust = 0.5, size = 11),
axis.text = element_text(size = 10))
#TEMPERATURA POR HORARIO usando geom_line
plot1 <- ggplot(dados, aes(y=temperatura, x=horario, colour=temperatura)) +
geom_line() +
labs(fill='Temperatura em Cº',
title="Temperaturas entre os anos de 2015 e 2020",
x="Anos",
y="Temperatura(Cº)") +
meu_tema
plot1
#VENTO E SENSACAO usando geom_smooth
plot2 <- ggplot(dados, aes(x = sensacao, y = vento)) +
geom_smooth(method = "gam") +
labs(title="Relação entre vento e sensação térmica entre 2015 e 2020",
x="Sensação Térmica",
y="Vento(Km/h)") +
meu_tema
plot2
#VENTO POR MESES usando boxplot
plot3 <- ggplot(dados,aes(x=meses,y=vento,group=meses,fill=meses)) +
geom_boxplot(show.legend = FALSE) +
labs(title = "Ventos nos meses dos anos de 2015 até 2020",
x="Meses",
y="Velocidade(Km/h)") +
meu_tema
plot3
plot31 <- ggplot(h2015,aes(x=meses2015,y=vento,group=meses2015,fill=meses2015)) +
geom_boxplot(show.legend = FALSE) +
labs(title = "Ventos nos meses do ano de 2015",
x="Meses",
y="Velocidade(Km/h)") +
meu_tema
plot31
plot32 <- ggplot(h2018,aes(x=meses2018,y=vento,group=meses2018,fill=meses2018)) +
geom_boxplot(show.legend = FALSE) +
labs(title = "Ventos nos meses do ano de 2018",
x="Meses",
y="Velocidade(Km/h)") +
meu_tema
plot32
#VENTO UMIDADE E TEMPERATURA usando ggMarginal
plot4 <- ggplot(dados, aes(x=temperatura, y=vento, color=umidade)) +
geom_point() +
labs(fill= 'Umidade(g/Kg)',
title="Registros da umidade de acordo com a \nrelação entre temperatura e vento\nentre 2015 e 2020",
x="Temperatura(Cº)",
y="Vento(Km/h)") +
meu_tema
plot4 <- ggMarginal(plot4, type="histogram")
plot4
#UMIDADE POR ANOS usando boxplot
plot5 <- ggplot(dados, aes(x=anos, y=umidade, group=anos, fill=anos)) +
geom_boxplot(show.legend = FALSE) +
labs(fill= 'Umidade(g/Kg)',
title="Registros de umidade do ar entre os anos de 2015 e 2020",
x="Anos",
y="Umidade(g/Kg)") +
meu_tema
plot5
plot4
plot4
media_dia_2015
h2015
dados_data <- format(as.Date(dados$horario), "%d/%m")
dados_data
dados
dados_data$horario <- format(as.Date(dados$horario), "%Y")
dados_data
dados <- cepagri #dados prontos
# format(data$horario, format="%Y")
dados_data <- dados
dados_data$horario <- format(as.Date(dados$horario), "%Y")
dados_data
temperaturas_anos <- dados_data %>% group_by(horario) %>% summarise(mínima=min(temperatura), máxima=max(temperatura), média=mean(temperatura))
rm(list=ls())
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggplot2")
library
library
library
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("ggExtra")
install.packages("gridExtra")
install.packages("xlsx")
tinytex::install_tinytex()
setwd("C:/Users/Usuário/Documents/GitHub/analise-dados")
library(ggplot2)
library(ggExtra)
library(gridExtra)
library(RColorBrewer)
library(xlsx)
library(tidyverse)
titulos <- c("horario", "temperatura", "vento", "umidade", "sensacao")
#pegamos o dado no arquivo e colocamos no data frame
cepagri <- read.csv("cepagri.csv", header = FALSE, sep = ";", col.names = titulos)
#convertemos e formatamos a data para POSIXct
cepagri[["horario"]] <- as.POSIXct(cepagri[["horario"]], format="%d/%m/%Y-%H:%M")
#pegamos os dados entre 01/01/2015 e 31/12/2020
cepagri <- cepagri[cepagri[["horario"]] >= "2015-01-01" & cepagri[["horario"]] <= "2020-12-31",]
#tiramos os dados que possuem erro/null
cepagri <- na.omit(cepagri)
#transformamos a temp em numeric (os outros campos ja ta)
cepagri[["temperatura"]] <- as.numeric(cepagri[["temperatura"]])
for(i in 1:nrow(cepagri)){
if(cepagri$sensacao[i] >= 99.9)
{
cepagri$sensacao[i] <- mean(c( cepagri$sensacao[i-1], cepagri$sensacao[i+1]))
}
if(cepagri$umidade[i] == 0)
{
#faz uma media de todos os indices de umidade do dia
cepagri$umidade[i] <- mean(cepagri$umidade[cepagri$horario >= cepagri$horario[i-1] & cepagri$horario < cepagri$horario[i]])
}
}
dados <- cepagri #dados prontos
meses <- factor(month.abb[as.integer(format(as.Date(dados[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
anos <- factor(as.integer(format(as.Date(dados[["horario"]]),"%Y")), levels = c(2015:2020), ordered = TRUE)
h2018 <- dados[dados[["horario"]] > "2017-12-31" & dados[["horario"]] <= "2018-12-31",]
meses2018 <- factor(month.abb[as.integer(format(as.Date(h2018[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
h2015 <- dados[dados[["horario"]] >= "2015-01-01" & dados[["horario"]] <= "2015-12-31",]
meses2015 <- factor(month.abb[as.integer(format(as.Date(h2015[["horario"]]),"%m"))], levels = month.abb, ordered = TRUE)
# Tema que será usado em cada gráfico
meu_tema = theme_bw() +
theme(plot.title = element_text(hjust = 0, size = 18),
axis.title = element_text(hjust = 0.5, size = 11),
axis.text = element_text(size = 10))
#TEMPERATURA POR HORARIO usando geom_line
plot1 <- ggplot(dados, aes(y=temperatura, x=horario, colour=temperatura)) +
geom_line() +
labs(fill='Temperatura em Cº',
title="Temperaturas entre os anos de 2015 e 2020",
x="Anos",
y="Temperatura(Cº)") +
meu_tema
# format(data$horario, format="%Y")
dados_data <- dados
dados_data$horario <- format(as.Date(dados$horario), "%Y")
temperaturas_anos <- dados_data %>% group_by(horario) %>% summarise(mínima=min(temperatura), máxima=max(temperatura), média=mean(temperatura))
temperaturas_anos
colnames(tabelaUmidade) <- c("Ano", "Mínima(ºC)", "Máxima(ºC)", "Média(ºC)")
colnames(tabelaUmidade) <- c("Ano", "Mínima(ºC)", "Máxima(ºC)", "Média(ºC)")
colnames(temperaturas_anos) <- c("Ano", "Mínima(ºC)", "Máxima(ºC)", "Média(ºC)")
write.xlsx(temperaturas_anos,file="tabelaTemperaturaAnos2015_2018.xlsx")
library(xlsx)
meses
meses2018
meses2015
plot1
plot4
#-----------------------------------------------------------
# GRÁFICOS 4: VENTO UMIDADE E TEMPERATURA usando ggMarginal
#-----------------------------------------------------------
plot4 <- ggplot(dados, aes(x=temperatura, y=vento, color=umidade)) +
geom_point() + #
labs(fill= 'Umidade(g/Kg)',
title="Registros da umidade de acordo com a \nrelação entre temperatura e vento\nentre 2015 e 2020",
x="Temperatura(Cº)",
y="Vento(Km/h)") +
meu_tema
plot4 <- ggMarginal(plot4, type="histogram")
plot4
# Seleciona todos os dados entre setembro e outubro de 2015 e de 2018, respectivamente
outubro2015 <- dados[dados[["horario"]] >= "2015-09-01" & dados[["horario"]] < "2015-11-01",]
outubro2018 <- dados[dados[["horario"]] >= "2018-09-01" & dados[["horario"]] < "2018-11-01",]
# Formata a data do horário ()
outubro2015$horario <- as.Date(outubro2015$horario)
outubro2018$horario <- as.Date(outubro2018$horario)
max_2015 <- outubro2015 %>% group_by(horario) %>% summarise(vento=max(vento))
max_2018 <- outubro2018 %>% group_by(horario) %>% summarise(vento=max(vento))
tabela_vento_2015_2018 <- cbind(format(as.Date(max_2015$horario), "%d/%m"), max_2015$vento, max_2018$vento)
tabela_vento_2015_2018
